using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ProjectTemplateData
{
    //Root items

    //Contains $ModNamespace$  $ModGUID$ $ModName$ $BRClassName$ $AssetBundleName$
    public static readonly string plugincs =
        "using BepInEx;\r\nusing HarmonyLib;\r\nusing UnityEngine;\r\nusing System.Reflection;\r\nusing ModelReplacement;\r\nusing BepInEx.Configuration;\r\nusing System;\r\nusing System.Xml.Linq;\r\n\r\nnamespace $ModNamespace$\r\n{\r\n    [BepInPlugin(\"$ModGUID$\", \"$ModName$\", \"0.1.0\")]\r\n    [BepInDependency(\"meow.ModelReplacementAPI\", BepInDependency.DependencyFlags.HardDependency)]\r\n    public class Plugin : BaseUnityPlugin\r\n    {\r\n        public static ConfigFile config;\r\n\r\n        // Example Config for single model mod\r\n        public static ConfigEntry<bool> enableModelForAllSuits { get; private set; }\r\n        public static ConfigEntry<bool> enableModelAsDefault { get; private set; }\r\n        public static ConfigEntry<string> suitNamesToEnableModel { get; private set; }\r\n\r\n        private static void InitConfig()\r\n        {\r\n            enableModelForAllSuits = config.Bind<bool>(\"Suits to Replace Settings\", \"Enable Model for all Suits\", false, \"Enable to model replace every suit. Set to false to specify suits\");\r\n            enableModelAsDefault = config.Bind<bool>(\"Suits to Replace Settings\", \"Enable Model as default\", false, \"Enable to model replace every suit that hasn't been otherwise registered.\");\r\n            suitNamesToEnableModel = config.Bind<string>(\"Suits to Replace Settings\", \"Suits to enable Model for\", \"Default,Orange suit\", \"Enter a comma separated list of suit names.(Additionally, [Green suit,Pajama suit,Hazard suit])\");\r\n\r\n        }\r\n        private void Awake()\r\n        {\r\n            config = base.Config;\r\n            InitConfig();\r\n            Assets.PopulateAssets();\r\n\r\n            // Plugin startup logic\r\n            if (enableModelForAllSuits.Value)\r\n        {\r\n                ModelReplacementAPI.RegisterModelReplacementOverride(typeof($BRClassName$));\r\n\r\n            }\r\n            if (enableModelAsDefault.Value)\r\n            {\r\n                ModelReplacementAPI.RegisterModelReplacementDefault(typeof($BRClassName$));\r\n\r\n            }\r\n            var commaSepList = suitNamesToEnableModel.Value.Split(',');\r\n            foreach (var item in commaSepList)\r\n            {\r\n                ModelReplacementAPI.RegisterSuitModelReplacement(item, typeof($BRClassName$));\r\n            }\r\n                \r\n\r\n            Harmony harmony = new Harmony(\"$ModGUID$\");\r\n            harmony.PatchAll();\r\n            Logger.LogInfo($\"Plugin {\"$ModGUID$\"} is loaded!\");\r\n        }\r\n    }\r\n    public static class Assets\r\n    {\r\n        // Replace mbundle with the Asset Bundle Name from your unity project \r\n        public static string mainAssetBundleName = \"$AssetBundleName$\";\r\n        public static AssetBundle MainAssetBundle = null;\r\n\r\n        private static string GetAssemblyName() => Assembly.GetExecutingAssembly().GetName().Name.Replace(\" \",\"_\");\r\n        public static void PopulateAssets()\r\n        {\r\n            if (MainAssetBundle == null)\r\n            {\r\n                Console.WriteLine(GetAssemblyName() + \".\" + mainAssetBundleName);\r\n                using (var assetStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(GetAssemblyName() + \".\" + mainAssetBundleName))\r\n                {\r\n                    MainAssetBundle = AssetBundle.LoadFromStream(assetStream);\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n}";
    //Contains $LCPath$ $AssetBundleName$
    public static readonly string csproj =
        "<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.1</TargetFramework>\r\n    <Nullable>enable</Nullable>\r\n    <LethalCompanyPath>$LCPath$</LethalCompanyPath>\r\n  </PropertyGroup>\r\n  \r\n  <PropertyGroup>\r\n    <RestoreSources>$(RestoreSources);https://api.nuget.org/v3/index.json;https://nuget.bepinex.dev/v3/index.json</RestoreSources>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <ReferencePath>$(ReferencePath);$(LethalCompanyPath)\\Lethal Company_Data\\Managed</ReferencePath>\r\n    <ReferencePath>$(ReferencePath);$(LethalCompanyPath)\\Lethal Company_Data\\Plugins</ReferencePath>\r\n    <ReferencePath>$(ReferencePath);$(LethalCompanyPath)\\BepinEx\\plugins</ReferencePath>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <None Remove=\"$AssetBundleName$\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <EmbeddedResource Include=\"$AssetBundleName$\" />\r\n  </ItemGroup>\r\n  \r\n  <ItemGroup>\r\n    <PackageReference Include=\"BepInEx.AssemblyPublicizer.MSBuild\" Version=\"0.4.1\" PrivateAssets=\"all\" />\r\n    <PackageReference Include=\"BepInEx.Analyzers\" Version=\"1.*\" PrivateAssets=\"all\" />\r\n    <PackageReference Include=\"BepInEx.Core\" Version=\"5.*\" IncludeAssets=\"compile\" />\r\n    <PackageReference Include=\"BepInEx.PluginInfoProps\" Version=\"1.*\" IncludeAssets=\"compile\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.2\" IncludeAssets=\"compile\" />\r\n    <PackageReference Include=\"UnityEngine.Modules\" Version=\"2022.3.9\" IncludeAssets=\"compile\" />\r\n    <PackageReference Include=\"HarmonyX\" Version=\"2.10.2\" IncludeAssets=\"compile\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <Reference Include=\"Assembly-CSharp\" Publicize=\"true\">\r\n      <HintPath>$(LethalCompanyPath)\\Lethal Company_Data\\Managed\\Assembly-CSharp.dll</HintPath>\r\n      <Private>false</Private>\r\n    </Reference>\r\n    <Reference Include=\"ModelReplacementAPI\">\r\n      <HintPath>ModelReplacementAPI.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"Unity.InputSystem\">\r\n      <HintPath>$(LethalCompanyPath)\\Lethal Company_Data\\Managed\\Unity.InputSystem.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"Unity.InputSystem.ForUI\">\r\n      <HintPath>$(LethalCompanyPath)\\Lethal Company_Data\\Managed\\Unity.InputSystem.ForUI.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"Unity.Netcode.Runtime\">\r\n      <HintPath>$(LethalCompanyPath)\\Lethal Company_Data\\Managed\\Unity.Netcode.Runtime.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"UnityEngine.UI\">\r\n      <HintPath>$(LethalCompanyPath)\\Lethal Company_Data\\Managed\\UnityEngine.UI.dll</HintPath>\r\n    </Reference>\r\n  </ItemGroup>\r\n\r\n  <Target Name=\"PostBuild\" AfterTargets=\"PostBuildEvent\">\r\n    <Exec Command=\"copy /Y &quot;$(TargetDir)$(ProjectName).dll&quot; &quot;$(ProjDir)Build&quot;  &#xD;&#xA;\" />\r\n  </Target>\r\n</Project>\r\n";

    //Contains $PrefabName$ $BRClassName$
    public static readonly string MRclass =
        "public class $BRClassName$ : BodyReplacementBase\r\n    {\r\n        protected override GameObject LoadAssetsAndReturnModel()\r\n        { \r\n            string model_name = \"$PrefabName$\";\r\n            return Assets.MainAssetBundle.LoadAsset<GameObject>(model_name);\r\n        }\r\n    }";

    //Contains $ModNamespace$ $ClassInsert$
    public static readonly string MRNameSpace =
        "using ModelReplacement;\r\nusing UnityEngine;\r\n\r\nnamespace $ModNamespace$\r\n{\r\n    $ClassInsert$\r\n}";

    //Build Items

    //Contains $ModName$ $ModDescription$ $MRAPI_CVer$
    public static readonly string manifest =
        "{\r\n    \"name\": \"$ModName$\",\r\n    \"version_number\": \"0.1.0\",\r\n    \"website_url\": \"\",\r\n    \"description\": \"$ModDescription$\",\r\n    \"dependencies\": [\r\n        \"BepInEx-BepInExPack-5.4.2100\",\r\n\t\t\"BunyaPineTree-ModelReplacementAPI-$MRAPI_CVer$\"\r\n    ]\r\n}";

    //Contains $ModName$ $ModDescription$
    public static readonly string readme =
        "# $ModName$ v0.1.0\r\n### $ModDescription$\r\n\r\n## Instructions\r\n- Place contents in `bepinex/plugins` folder. Ensure that ModelReplacementAPI is also installed. \r\n\r\n## Changelog\r\n\t- v0.1.0\r\n\t\t- Release";
}
